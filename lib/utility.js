(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["ct-utility"] = factory();
	else
		root["ct-utility"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_RESULT__;/**\n * @author rubyisapm\n */\n!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    var base = __webpack_require__(1),\n        objTransfer = __webpack_require__(2),\n        cookie = __webpack_require__(3),\n        localStorage = __webpack_require__(4),\n        sessionStorage = __webpack_require__(5),\n        URIParser = __webpack_require__(6),\n        numberFormat = __webpack_require__(7),\n        dateFilter = __webpack_require__(8),\n        areaDataFormat = __webpack_require__(9),\n        INFO = __webpack_require__(10);\n\n    return {\n        base: base,\n        objTransfer: objTransfer,\n        cookie: cookie,\n        localStorage: localStorage,\n        sessionStorage: sessionStorage,\n        URIParser: URIParser,\n        numberFormat: numberFormat,\n        dateFilter: dateFilter,\n        areaDataFormat:areaDataFormat,\n        INFO: INFO\n    };\n}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./index.js\n// module id = 0\n// module chunks = 0\n//# sourceURL=webpack:///./index.js?");

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	eval("/**\n * @author rubyisapm\n */\n!(module.exports = {\n    /**\n     * 获取字符串的字节长度\n     * @param str\n     * @returns {number}\n     */\n    getByteLen: function (str) {\n        var str1=str.replace(/([^\\x00-\\xff])/ig,'$1 ');\n        return str1.length;\n    },\n    /**\n     * 按字节截取内容\n     * @param source 原字符串\n     * @param length 要截取的长度\n     * @param halfCut 是否要舍弃半个中文\n     * @returns {string}\n     */\n    subByte: function (source,length,halfCut) {\n        var sliced=(source + '').substr(0, length).replace(/([^\\x00-\\xff])/g, '$1 ').substr(0, length).replace(/([^\\x00-\\xff]) /g, '$1');\n        if(halfCut && this.getByteLen(sliced)>length){\n            sliced=sliced.substr(0,sliced.length-1);\n        }\n        return sliced;\n    },\n    /**\n     * 将字符串的首字母大写\n     * @param {string} str 原字符串\n     * @returns {string} 转换后的字符串\n     */\n    upperCaseFirst: function (str) {\n        str = str + '';\n        return str.replace(/^[a-z]/, function (firstLetter) {\n            return firstLetter.toUpperCase();\n        })\n    },\n    /**\n     * 将字符串的首字母小写\n     * @param {string} str 原字符串\n     * @returns {string} 转换后的字符串\n     */\n    lowerCaseFirst: function (str) {\n        str = str + '';\n        return str.replace(/^[A-Z]/, function (firstLetter) {\n            return firstLetter.toLowerCase();\n        })\n    },\n    /**\n     * 判断一个值是不是window对象\n     * @param obj\n     * @returns {boolean}\n     */\n    isWindow: function (obj) {\n        return obj != null && obj === obj.window;\n    },\n    /**\n     * 判断一个值是不是数组\n     * @param {*} val 要判断的值\n     * @returns {boolean} 是否为数组\n     */\n    isArray: function (val) {\n        return Array.isArray(val);\n    },\n    /**\n     * 判断一个值是不是对象\n     * @param {*} val 要判断的值\n     * @returns {boolean} 是否为数组\n     */\n    isObject: function (val) {\n        return typeof val === 'object' && !this.isArray(val);\n    },\n    /**\n     * 判断一个值是不是纯文本对象\n     * 即其属性不是对象/dom节点/window\n     * @param obj\n     * @returns {boolean}\n     */\n    isPlainObject: function (obj) {\n        if (!this.isObject(obj) || obj.nodeType || this.isWindow(obj)) {\n            return false;\n        }\n        if (obj.constructor && !obj.constructor.prototype.hasOwnProperty('isPrototypeOf')) {\n            return false;\n        }\n        return true;\n    },\n    /**\n     * 判断一个值是不是JSON\n     * @param val\n     * @returns {boolean}\n     */\n    isJSON: function (val) {\n        try {\n            var result = JSON.parse(val);\n            return typeof result === 'object';\n        } catch (e) {\n            return false;\n        }\n    },\n    /**\n     * 判断一个值是不是函数\n     * @param val\n     * @returns {boolean}\n     */\n    isFunction: function (val) {\n        return typeof val === 'function';\n    },\n    /**\n     * 判断一个值是不是正则表达式\n     * @param obj\n     * @returns {boolean}\n     */\n    isRegExp: function (obj) {\n        return Object.prototype.toString.call(obj) === \"[object RegExp]\";\n    },\n\n    extend: function () {\n        var options, name, src, copy, copyIsArray, clone,\n            target = arguments[0] || {},\n            i = 1,\n            length = arguments.length,\n            deep = false;\n\n        // Handle a deep copy situation\n        if (typeof target === \"boolean\") {\n            deep = target;\n\n            // Skip the boolean and the target\n            target = arguments[i] || {};\n            i++;\n        }\n\n        // Handle case when target is a string or something (possible in deep copy)\n        if (typeof target !== \"object\" && !this.isFunction(target)) {\n            target = {};\n        }\n\n        // Extend jQuery itself if only one argument is passed\n        if (i === length) {\n            target = this;\n            i--;\n        }\n\n        for (; i < length; i++) {\n\n            // Only deal with non-null/undefined values\n            if (( options = arguments[i] ) != null) {\n\n                // Extend the base object\n                for (name in options) {\n                    src = target[name];\n                    copy = options[name];\n\n                    // Prevent never-ending loop\n                    if (target === copy) {\n                        continue;\n                    }\n\n                    // Recurse if we're merging plain objects or arrays\n                    if (deep && copy && ( this.isPlainObject(copy) ||\n                        ( copyIsArray = this.isArray(copy) ) )) {\n\n                        if (copyIsArray) {\n                            copyIsArray = false;\n                            clone = src && this.isArray(src) ? src : [];\n\n                        } else {\n                            clone = src && this.isPlainObject(src) ? src : {};\n                        }\n\n                        // Never move original objects, clone them\n                        target[name] = this.extend(deep, clone, copy);\n\n                        // Don't bring in undefined values\n                    } else if (copy !== undefined) {\n                        target[name] = copy;\n                    }\n                }\n            }\n        }\n        // Return the modified object\n        return target;\n    },\n\n    /**\n     * 检测对象是否为空对象\n     * @param {?Object} obj 要检测的对象，null会被检测为空对象\n     * @returns {boolean}\n     */\n    isEmptyObject: function (obj) {\n        for (var i in obj) {\n            return false;\n        }\n        return true;\n    },\n\n    /**\n     * 获取一个对象中具体key[组]的值，原样输出，如果为引用类型则保持引用\n     * @param {Object|Array} obj 对象\n     * @param {String} key key[组]\n     * @returns {*} key[组]对应的值\n     */\n    getObjValByKey: function (obj, key) {\n        key = key.split('.');\n        var result = obj;\n        key.map(function (item) {\n            result = result[item];\n        });\n        return result;\n    },\n    /**\n     * 设置一个对象中具体key[组]的值，可以为具体的值或者处理方法\n     * @param {Object} obj 对象\n     * @param {String} key key[组]\n     * @param {*} valOrFn 设置的值或者处理方法(方法接受两个参数:key所在的对象，最后的key)\n     * @returns {*}\n     */\n    setObjValByKey:function(obj,key,valOrFn){\n        var that=this;\n        key = key.split('.');\n        var result={},\n            targetClone = JSON.parse(JSON.stringify(obj)),\n            pointer=[targetClone];\n        //targetClone用于逐渐定位至目标key\n        if(typeof that.setObjValByKey.$rules==='undefined'){\n            //内置规则\n            that.setObjValByKey.$rules= {\n                '$null2str':function(obj,key){\n                    if(obj[key]===null){\n                        obj[key]='';\n                    }\n                },// null -> ''\n                '$null2zero':function(obj,key){\n                    if(obj[key]===null){\n                        obj[key]=0;\n                    }\n                },// null -> 0\n                '$null2arr':function(obj,key){\n                    if(obj[key]===null){\n                        obj[key]=[];\n                    }\n                },// null -> []\n                '$null2obj':function(obj,key){\n                    if(obj[key]===null){\n                        obj[key]={};\n                    }\n                },// null -> {}\n                '$empty2zero-strict':function(obj,key){\n                    if(obj[key]===''){\n                        obj[key]=0;\n                    }\n                },// '' -> 0\n                '$empty2zero-relaxed':function(obj,key){\n                    if(/^\\s*$/.test(obj[key])){\n                        obj[key]=0;\n                    }\n                },// '  ' || '' -> 0\n                '$trim':function(obj,key){\n                    if(typeof obj[key]==='string'){\n                        obj[key]=obj[key].replace(/(^\\s*|\\s*$)/g, '');\n                    }\n                }// 去掉前后空格\n            };\n        }\n\n        key.map(function (key,index,arr) {\n            if(index===arr.length-1 && typeof pointer[pointer.length-1]!=='undefined'){\n                if(!that.isObject(pointer[pointer.length-1])){\n                    console.log('warning from ct-ct-utility:setObjValBykey中key所属的不是一个对象(你可能正在给非对象添加属性!)');\n                }\n                if(typeof valOrFn==='function'){\n                    valOrFn(pointer[pointer.length-1],key);\n                }else if(typeof valOrFn==='string' && valOrFn.indexOf('$')===0 && typeof that.setObjValByKey.$rules[valOrFn] !=='undefined'){\n                    //当匹配到内置规则时，使用内置规则对目标值做转换\n                    that.setObjValByKey.$rules[valOrFn](pointer[pointer.length-1],key);\n                }else{\n                    pointer[pointer.length-1][key]=valOrFn;\n                }\n            }else{\n                if(typeof pointer[pointer.length-1][key]!=='undefined'){\n                    pointer.push(pointer[pointer.length-1][key]);\n                }\n            }\n        });\n        //在原对象中更新targetClone对目标key的变化\n        this.extend(true,result,obj,targetClone);\n        return result;\n    },\n\n    /**\n     * 判断浏览器是否支持storage\n     * @param {string} type 'localStorage'/'sessionStorage'\n     * @returns {boolean}\n     */\n    isStorageAvailable: function (type) {\n        try {\n            var x = '__storage_test__',\n                storage = window[type];\n            storage.setItem(x, x);\n            storage.removeItem(x);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n})\n;\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/base.js\n// module id = 1\n// module chunks = 0\n//# sourceURL=webpack:///./src/base.js?");

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_RESULT__;/**\n * @author rubyisapm\n */\n!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    var base = __webpack_require__(1);\n\n    /**\n     * 按照给定的规则转换原对象中的key的格式\n     * @param {Function} transfer 转换函数\n     * @param {?Object} obj 原对象\n     * @returns {?Object} obj 转换后的对象\n     */\n    function transferKeyInObj(transfer, obj, jsonTransfer) {\n        if (obj === null) {\n            return obj;\n        }\n        var newObj = {},\n            keys = Object.keys(obj);\n        if (keys.length === 0) {\n            return obj;\n        }\n        keys.map(function (key) {\n            var val = obj[key],\n                newKey = transfer(key);\n            if (base.isObject(val)) {\n                newObj[newKey] = transferKeyInObj(transfer, val, jsonTransfer);\n            } else if (base.isArray(val)) {\n                newObj[newKey] = transferKeyInArray(transfer, val, jsonTransfer);\n            } else if (base.isJSON(val) && jsonTransfer) {\n                newObj[newKey] = JSON.stringify(transferKeyInJSON(transfer, val, jsonTransfer));\n            } else {\n                newObj[newKey] = val;\n            }\n        });\n        return newObj;\n    }\n\n    /**\n     * 按照给定的规则转换原数组中的对象中的key的格式\n     * @param {Function} transfer 转换函数\n     * @param {Array} arr 原对象\n     * @returns {?Object} obj 转换后的对象\n     */\n    function transferKeyInArray(transfer, arr, jsonTransfer) {\n        if (arr.length == 0) {\n            return arr;\n        }\n        var newArray = [];\n        arr.map(function (item, index) {\n            if (base.isArray(item)) {\n                newArray[index] = transferKeyInArray(transfer, item, jsonTransfer);\n            } else if (base.isObject(item)) {\n                newArray[index] = transferKeyInObj(transfer, item, jsonTransfer);\n            } else if (base.isJSON(item) && jsonTransfer) {\n                newArray[index] = JSON.stringify(transferKeyInJSON(transfer, item, jsonTransfer));\n            } else {\n                newArray[index] = item;\n            }\n        });\n        return newArray;\n    }\n\n    /**\n     * 按照给定的规则转换原json字符串中的key的格式\n     * @param {Function} transfer\n     * @param {String} json\n     */\n    function transferKeyInJSON(transfer, json) {\n        var jsonObj = JSON.parse(json);\n        if (base.isArray(jsonObj)) {\n            return transferKeyInArray(transfer, jsonObj, true);\n        } else if (base.isObject(jsonObj)) {\n            return transferKeyInObj(transfer, jsonObj, true);\n        } else if (base.isJSON(jsonObj)) {\n            return transferKeyInJSON(transfer, jsonObj, true)\n        }\n\n    }\n\n    /**\n     * 去除对象中某些属性值的前后空格\n     * @param {object} obj 原对象\n     * @param {array} keys 要修改的key，支持以.分隔的串联属性如app.id\n     * @returns {*} 处理后的对象\n     */\n    function trimSomeInObj(obj, keys) {\n        var objClone = JSON.parse(JSON.stringify(obj));\n        keys.map(function (key) {\n            objClone = base.setObjValByKey(objClone, key, function (obj, key) {\n                obj[key] = obj[key].replace(/(^\\s*|\\s*$)/g, '');\n            });\n        });\n        return objClone;\n    }\n\n    /**\n     * 去除数组中单一项的某些属性值的前后空格\n     * @param {Array} arr 原数组\n     * @param {Array} keys 要修改的key，支持以.分隔的串联属性如app.id\n     * @returns {*} 处理后的数组\n     */\n    function trimSomeInArray(arr, keys) {\n        return arr.map(function(item){\n            return trimSomeInObj(item,keys);\n        })\n    }\n\n    /**\n     * 以具体的方式转换对象中的key\n     * @param {Object} obj 原对象\n     * @param {Array} rules 规则定义\n     * @param {Array} rules[].keys 每项为要转换的key\n     * @param {String | Function} rules[].rule 转换规则\n     */\n    function transferSomeInObj(obj,rules){\n        var objClone = JSON.parse(JSON.stringify(obj));\n        rules.map(function(item){\n            var keys=item.keys,\n                transfer=item.rule;\n            keys.map(function (key) {\n                objClone = base.setObjValByKey(objClone, key, transfer);\n            });\n        });\n        return objClone;\n    }\n\n    /**\n     * 以具体的方式转换对象中的key\n     * @param {Array} arr 原数组\n     * @param {Array} rules 规则定义\n     * @param {Array} rules[].keys 每项为要转换的key\n     * @param {String | Function} rules[].rule 转换规则\n     */\n    function transferSomeInArray(arr,rules){\n        return arr.map(function(item){\n            return trimSomeInObj(item,rules);\n        })\n    }\n\n    return {\n        /**\n         * 将原对象中的key的首字母小写\n         * @param {Object} obj 原对象\n         * @param {Boolean} jsonTransfer 是否转换json中的内容\n         * @returns {Object} 转换后的对象\n         */\n        upperKey: function (obj, jsonTransfer) {\n            if (base.isArray(obj)) {\n                return transferKeyInArray(base.upperCaseFirst, obj, jsonTransfer);\n            } else {\n                return transferKeyInObj(base.upperCaseFirst, obj, jsonTransfer);\n            }\n        },\n        /**\n         * 将原对象中的key的首字母小写\n         * @param {Object} obj 原对象\n         * @param {Boolean} jsonTransfer 是否转换json中的内容\n         * @returns {Object} 转换后的对象\n         */\n        lowerKey: function (obj, jsonTransfer) {\n            if (base.isArray(obj)) {\n                return transferKeyInArray(base.lowerCaseFirst, obj, jsonTransfer);\n            } else {\n                return transferKeyInObj(base.lowerCaseFirst, obj, jsonTransfer);\n            }\n        },\n        trimSome: function(obj,keys){\n            if (base.isArray(obj)) {\n                return trimSomeInArray(obj,keys);\n            } else {\n                return trimSomeInObj(obj,keys);\n            }\n        },\n        transferSome:function(obj,rules){\n            if (base.isArray(obj)) {\n                return transferSomeInArray(obj,rules);\n            } else {\n                return transferSomeInObj(obj,rules);\n            }\n        }\n    }\n}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/objTransfer.js\n// module id = 2\n// module chunks = 0\n//# sourceURL=webpack:///./src/objTransfer.js?");

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_RESULT__;/**\r\n * @author liwei\r\n */\r\n\r\n\r\n!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * 获取 cookie\r\n\t * @param  {String} sKey 键名\r\n\t * @return {String}      键名\r\n\t */\r\n\tfunction get(sKey) {\r\n\t\treturn decodeURIComponent(document.cookie.replace(new RegExp('(?:(?:^|.*;)\\\\s*' + encodeURIComponent(sKey).replace(/[\\-\\.\\+\\*]/g, '\\\\$&') + '\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$'), '$1')) || null;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置 cookie\r\n\t * @param {String} sKey    键名\r\n\t * @param {String} sValue  键值\r\n\t * @param {[type]} vEnd    过期时间\r\n\t * @param {String} sPath   路径\r\n\t * @param {String} sDomain 域名\r\n\t * @param {Boolean} bSecure 安全\r\n\t */\r\n\tfunction set(sKey, sValue, vEnd, sPath, sDomain, bSecure) {\r\n\t\tvar sExpires = '';\r\n\r\n\t\tif ( !sKey || /^(?:expires|max\\-age|path|domain|secure)$/i.test(sKey) ) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (vEnd) {\r\n\t\t\tswitch (vEnd.constructor) {\r\n\t\t\t\tcase Number:\r\n\t\t\t\t\tsExpires = vEnd === Infinity ? '; expires=Fri, 31 Dec 9999 23:59:59 GMT' : '; max-age=' + vEnd;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase String:\r\n\t\t\t\t\tsExpires = '; expires=' + vEnd;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\t\r\n\t\t\t\tcase Date:\r\n\t\t\t\t\tsExpires = '; expires=' + vEnd.toUTCString();\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tdocument.cookie = encodeURIComponent( sKey ) + '=' + encodeURIComponent( sValue ) +\r\n\t\t\tsExpires +\r\n\t\t\t(sDomain ? '; domain=' + sDomain : '') +\r\n\t\t\t(sPath ? '; path=' + sPath : '') +\r\n\t\t\t(bSecure ? '; secure' : '');\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * 移除某个 cookie\r\n\t * @param  {String} sKey    键名\r\n\t * @param  {String} sPath   路径\r\n\t * @param  {String} sDomain 域名\r\n\t * @return {Boolean}        true-删除成功，false-删除失败\r\n\t */\r\n\tfunction remove(sKey, sPath, sDomain) {\r\n\t\tif ( !sKey || !has(sKey) ) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tdocument.cookie = encodeURIComponent(sKey) + '=; expires=Thu, 01 Jan 1970 00:00:00 GMT' +\r\n\t\t\t\t\t\t\t(sDomain ? '; domain=' + sDomain : '') +\r\n\t\t\t\t\t\t\t\t(sPath ? '; path=' + sPath : '');\r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * 判断是否拥有某个 key\r\n\t * @param  {String}  sKey 键名\r\n\t * @return {Boolean}\r\n\t */\r\n\tfunction has(sKey) {\r\n\t\tvar patt = new RegExp( '(?:^|;\\\\s*)' + encodeURIComponent( sKey ).replace(/[\\-\\.\\+\\*]/g, '\\\\$&') + '\\\\s*\\\\=' );\r\n\r\n\t\treturn patt.test( document.cookie );\r\n\t}\r\n\r\n\t/**\r\n\t * 获取\r\n\t * @return {Object} 所有的 cookie 键值对\r\n\t */\r\n\tfunction keys() {\r\n\t\tvar map     = {},\r\n\t\t\tallKeys = document.cookie.\r\n\t\t\t\t\t\treplace(/((?:^|\\s*;)[^\\=]+)(?=;|$)|^\\s*|\\s*(?:\\=[^;]*)?(?:\\1|$)/g, '').\r\n\t\t\t\t\t\t\tsplit( /\\s*(?:\\=[^;]*)?;\\s*/ );\r\n\r\n\r\n\t\tallKeys.forEach(function( key ) {\r\n\t\t\tmap[ decodeURIComponent(key) ] = get( key );\r\n\t\t});\r\n\r\n\t\treturn map;\r\n\t}\r\n\r\n\treturn {\r\n\t\tget    : get,\r\n\t\tset    : set,\r\n\t\tremove : remove,\r\n\t\thas    : has,\r\n\t\tkeys   : keys\r\n\t};\r\n}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/cookie.js\n// module id = 3\n// module chunks = 0\n//# sourceURL=webpack:///./src/cookie.js?");

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_RESULT__;/*!\r\n * @author liwei\r\n */\r\n\r\n!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\r\n\t'use strict';\r\n\r\n\tvar base = __webpack_require__(1);\r\n\r\n\tvar IS_LOCAL_STORAGE_AVAILABLE = base.isStorageAvailable( 'localStorage' );\r\n\r\n\t/**\r\n\t * 设置一个 storage\r\n\t * @param {String} sKey   键名\r\n\t * @param {String} sValue 键值\r\n\t */\r\n\tfunction set( sKey, sValue ) {\r\n\t\tif ( IS_LOCAL_STORAGE_AVAILABLE ) {\r\n\t\t\tlocalStorage.setItem( sKey, sValue );\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 获取 storage\r\n\t * @param  {String} sKey 键名\r\n\t * @return {String}      键值\r\n\t */\r\n\tfunction get( sKey ) {\r\n\t\tif ( IS_LOCAL_STORAGE_AVAILABLE ) {\r\n\r\n\t\t\treturn localStorage.getItem( sKey );\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 清除所有 storage\r\n\t */\r\n\tfunction clear() {\r\n\t\tif ( IS_LOCAL_STORAGE_AVAILABLE ) {\r\n\r\n\t\t\tlocalStorage.clear();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 删除一个 storage\r\n\t * @param  {String} sKey 键名\r\n\t */\r\n\tfunction remove( sKey ) {\r\n\t\tif ( IS_LOCAL_STORAGE_AVAILABLE ) {\r\n\r\n\t\t\tlocalStorage.removeItem( sKey );\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tset: set,\r\n\t\tget: get,\r\n\t\tclear: clear,\r\n\t\tremove: remove\r\n\t};\r\n}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/localStorage.js\n// module id = 4\n// module chunks = 0\n//# sourceURL=webpack:///./src/localStorage.js?");

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_RESULT__;/*!\r\n * @author liwei\r\n */\r\n\r\n\r\n!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\r\n\t'use strict';\r\n\r\n\tvar base = __webpack_require__(1);\r\n\r\n\tvar IS_SESSION_STORAGE_AVAILABLE = base.isStorageAvailable( 'sessionStorage' );\r\n\r\n\t/**\r\n\t * 设置一个 storage\r\n\t * @param {String} sKey   键名\r\n\t * @param {String} sValue 键值\r\n\t */\r\n\tfunction set( sKey, sValue ) {\r\n\t\tif ( IS_SESSION_STORAGE_AVAILABLE ) {\r\n\r\n\t\t\tsessionStorage.setItem( sKey, sValue );\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 获取 storage\r\n\t * @param  {String} sKey 键名\r\n\t * @return {String}      键值\r\n\t */\r\n\tfunction get( sKey ) {\r\n\t\tif ( IS_SESSION_STORAGE_AVAILABLE ) {\r\n\r\n\t\t\treturn sessionStorage.getItem( sKey );\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 清除所有 storage\r\n\t */\r\n\tfunction clear() {\r\n\t\tif ( IS_SESSION_STORAGE_AVAILABLE ) {\r\n\t\t\t\r\n\t\t\tsessionStorage.clear();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 删除一个 storage\r\n\t * @param  {String} sKey 键名\r\n\t */\r\n\tfunction remove( sKey ) {\r\n\t\tif ( IS_SESSION_STORAGE_AVAILABLE ) {\r\n\r\n\t\t\tsessionStorage.removeItem( sKey );\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tset: set,\r\n\t\tget: get,\r\n\t\tclear: clear,\r\n\t\tremove: remove\r\n\t};\r\n}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sessionStorage.js\n// module id = 5\n// module chunks = 0\n//# sourceURL=webpack:///./src/sessionStorage.js?");

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_RESULT__;/**\n * @author rubyisapm\n */\n!(__WEBPACK_AMD_DEFINE_RESULT__ = function(){\n    var base=__webpack_require__(1);\n    /**\n     * 将查询字符串解析为查询参数数组\n     * @param {string} search\n     */\n    function searchToParamGroup(search){\n        var paramGroup={};\n        if(search!==''){\n            search.replace(/(\\?|&|\\b)(([^=?&]+)=([^=&]*))/g,function(_,_,$1,$2,$3){\n                paramGroup[$2]=$3;\n            });\n        }\n        return paramGroup;\n    }\n\n    /**\n     * URL解析并返回对应的参数\n     * @param {string} uri uri\n     * @returns {{protocol: *, hostname: *, port: *, pathname: *, search: *, hash: *, host: *}}\n     */\n    function uriParser(uri){\n        var parser = document.createElement('a');\n        parser.href = uri;\n        return {\n            protocol:parser.protocol,\n            hostname:parser.hostname,\n            port:parser.port,\n            pathname:parser.pathname,\n            search:parser.search,\n            hash:parser.hash,\n            host:parser.host\n        };\n    }\n\n    /**\n     * 获取url中指定参数的值\n     * @param {string} uri 要解析的url\n     * @param {string} param 要获取的查询参数的key值\n     * @returns {undefined | string}\n     */\n    function getParam(uri,param){\n        var paramGroup=searchToParamGroup(uriParser(uri).search);\n        if(!base.isEmptyObject(paramGroup)){\n            return paramGroup[param];\n        }\n    }\n\n    /**\n     * 获取url中的参数集合\n     * @param {string} uri 要解析的url\n     * @returns {object}\n     */\n    function getParamGroup(uri){\n        return searchToParamGroup(uriParser(uri).search);\n    }\n\n\n    return{\n        uriParser:uriParser,\n        getParamGroup:getParamGroup,\n        getParam:getParam,\n        searchToParamGroup:searchToParamGroup\n    };\n}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/URIParser.js\n// module id = 6\n// module chunks = 0\n//# sourceURL=webpack:///./src/URIParser.js?");

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	eval("/**\n * Created by wx-wangxiang on 17/01/03.\n */\n!(module.exports = {\n\t//将字符串转化为数字\n\ttoInt: function(str){\n\t    return parseInt(str, 10) || 0;\n\t},\n\t/**\n\t * 补零操作\n\t * @param  {int} num    需要进行补零操作的参数\n\t * @param  {int} digits 想要拓展的位数\n\t * @return {string}     补零操作后的数字\n\t */\n\tzeroFill: function(num, digits) {\n\t\tvar num = '' + num; //将数字转为字符串的简便方法，同样的如果将数字字符串转为数字可以在其前面加上\"+\"号\n\t\twhile(num.length < digits) {\n\t\t\tnum = '0' + num;\n\t\t}\n\t\treturn num;\n\t}\n})\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/numberFormat.js\n// module id = 7\n// module chunks = 0\n//# sourceURL=webpack:///./src/numberFormat.js?");

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_RESULT__;/**\n * @author wangxiang\n */\n!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\tvar numberFormat = __webpack_require__(7),\n\t\trdateFormat = /((?:[^yMdHhmsaZE']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z))(.*)/,\n    \traspnetjson = /^\\/Date\\((\\d+)\\)\\/$/, //匹配 /Date(12345)/ 类型的字符串\n\t\tDATE_FORMATS = {\n\t\tyyyy: dateGetter(\"FullYear\", 4), //对年份进行四位数的显示 如：2017/01/06\n\t\tyy: dateGetter(\"FullYear\", 2, 0, true), //对年份进行两位数的显示 如：17/01/06\n\t\ty: dateGetter(\"FullYear\", 1), //年份的一般的显示 如：2017/01/06\n\t\tMM: dateGetter(\"Month\", 2, 1), //对于月份的单个数字会进行补零, 如：2017/01/06\n\t  \tM: dateGetter(\"Month\", 1, 1), //对于月份的单个数字不会进行补零, 如：2017/1/06\n\t  \tdd: dateGetter(\"Date\", 2), //对于日期的单个数字会进行补零, 如：2017/01/06\n\t  \td: dateGetter(\"Date\", 1), //对于日期的单个数字不会补零, 如：2017/01/6\n\t  \tHH: dateGetter(\"Hours\", 2), //对于小时的单个数字会进行补零,并且是24小时制 如：2017/01/06 08:01\n\t  \tH: dateGetter(\"Hours\", 1), //对于小时的单个数字不会进行补零,并且是24小时制 如：2017/01/06 8:01\n\t  \thh: dateGetter(\"Hours\", 2, -12), //对于小时的单个数字会进行补零,并且是12小时制 如：2017/01/06 08:01\n\t  \th: dateGetter(\"Hours\", 1, -12), //对于小时的单个数字不会进行补零,并且是12小时制 如：2017/01/06 8:01\n\t  \tmm: dateGetter(\"Minutes\", 2), //对于分钟的单个数字会进行补零 如：2017/03/06 08:01\n\t  \tm: dateGetter(\"Minutes\", 1), //对于分钟的单个数字不会进行补零 如：2017/03/06 08:1\n\t  \tss: dateGetter(\"Seconds\", 2), //对于秒数的单个数字会进行补零 如：2017/03/06 08:01:09\n\t  \ts: dateGetter(\"Seconds\", 1) //对于秒数的单个数字会进行补零 如：2017/03/06 08:01:9\n\t};\n\t/**\n\t * 根据不同的日期format,获取相应的年，月，日，时，分，秒的显示格式\n\t * @param  {string} name   函数通过该参数执行不同的时间操作的方法\n\t * @param  {int} size   日期显示的位数\n\t * @param  {int} offset 时间显示的格式，12小时制还是24小时制(用于小时的显示)\n\t * @param  {boolean} trim   用于年份的两位数的显示\n\t * @return {Function}        返回数字格式化方法\n\t */\n\tfunction dateGetter(name, size, offset, trim) {\n\t    return function (date) {\n\t\t    var value = date[\"get\" + name]();\n\t\t    if (offset > 0 || value > -offset){\n\t\t      \tvalue += offset;\n\t\t    }\n\t\t    if (value === 0 && offset === -12) {\n\t\t      \tvalue = 12;\n\t\t    }\n\t\t    return padNumber(value, size, trim);\n\t\t}\n\t}\n\t/**\n\t * 数字格式化\n\t * @param  {int} num    获得的日期\n\t * @param  {[type]} digits 日期要显示的位数\n\t * @param  {boolean} trim   年份是否是两位数显示\n\t * @return {string}        返回格式化后的数字\n\t */\n\tfunction padNumber(num, digits, trim) {\n\t\tvar neg = '';\n\t\tif (num < 0) {\n\t\t    neg = '-';\n\t\t    num = -num;\n\t\t}\n\t\tnum = numberFormat.zeroFill(num, digits); //补零操作\n\t\tif (trim){\n\t\t    num = num.substr(num.length - digits);\n\t\t}\n\t\treturn neg + num;\n\t}\n\t/**\n\t * 日期格式化\n\t * @param  {obj} date   日期对象\n\t * @param  {string} format 格式化的方式\n\t * @return {string}        格式化后的日期\n\t */\n\tfunction dateFilter(date, format) {\n\t\tvar text = \"\",\n\t\t    parts = [],\n\t\t    fn, match;\n\t\tformat = format || \"yyyy-M-d\";\n\t\tif (typeof date === \"string\") {\n\t\t    if (/^\\d+$/.test(date)) {\n\t\t      \tdate = numberFormat.toInt(date);\n\t\t    } else if (raspnetjson.test(date)) { //匹配 '/Date(1483410908227)/' 类型的字符串\n\t\t      \tdate = +RegExp.$1; //RegExp.$1 表示前面raspnetjson.test()匹配到的第一个括号中的内容\n\t\t    } else if(/^\\d{4}\\D*\\d{2}\\D*\\d{2}$/.test(date)){\n\t\t\t\tdate=new Date(date)-8*3600*1000;\n\t\t\t}else if(/^\\d{4}\\D*\\d{2}\\D*\\d{2} \\d{2}:\\d{2}:\\d{2}$/.test(date)){\n\t\t\t\tdate=new Date(date);\n\t\t\t}else{\n\t\t      \tconsole.error('请输入合法的日期');\n\t\t      \treturn;\n\t\t    }\n\t\t}\n\t\tif (typeof date === 'number') {\n\t\t    date = new Date(date);\n\t\t}\n\t\twhile (format) {\n\t\t    match = rdateFormat.exec(format);\n\t\t    /* istanbul ignore else */\n\t\t    if (match) {\n\t\t      \tparts = parts.concat(match.slice(1));\n\t\t      \tformat = parts.pop();\n\t\t    } else {\n\t\t      \tparts.push(format);\n\t\t      \tformat = null;\n\t\t    }\n\t\t}\n\t\tparts.forEach(function (value) {\n\t\t    fn = DATE_FORMATS[value];\n\t\t    text += fn ? fn(date) : value.replace(/(^'|'$)/g, \"\").replace(/''/g, \"'\");\n\t\t});\n\t\treturn text;\n\t}\n\n\treturn dateFilter\n}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/dateFilter.js\n// module id = 8\n// module chunks = 0\n//# sourceURL=webpack:///./src/dateFilter.js?");

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	eval("/**\n * @author rubyisapm\n */\n/**\n * 该地区常量AREA为内部地区源数据，请直接从script引入该全局变量\n */\n!(module.exports = {\n    /**\n     * 检测当前的地区类似\n     * @param nameOrId 地区ID[组]或者名称[组]\n     * @returns {String} 'province' | 'city' | 'region' | 'other'\n     */\n    areaType: function (nameOrId) {\n        var isId = /^\\d+$/.test(nameOrId);\n        if (isId) {\n            if (nameOrId.length === 2) {\n                return 'province';\n            } else if (nameOrId.length === 4) {\n                return 'city';\n            } else if (nameOrId.length === 6) {\n                return 'region';\n            }\n        } else {\n            var areaArr = nameOrId.split(/[^\\u4e00-\\u9fa5]+/);\n            if (areaArr.length === 1) {\n                return 'province';\n            } else if (areaArr.length === 2) {\n                return 'city';\n            } else if (areaArr.length === 3) {\n                return 'region';\n            }\n        }\n        return 'other';\n    },\n    /**\n     * 根据地区名称组获取对应的id组 如'浙江-杭州'转换为0601\n     * @param {String} name 地区名称如'浙江'(或名称组如'浙江-杭州')\n     * @returns {String}\n     */\n    getAreaIdByName: function (name) {\n        name = name.split(/[^\\u4e00-\\u9fa5]+/);\n        var provinceName = name[0],\n            cityName = name.length > 1 ? name[1] : '',\n            regionName = name.length > 2 ? name[2] : '',\n            provinceId = AREA.province.filter(function (item) {\n                return item.Name === provinceName;\n            })[0].ID,\n            cityId = cityName != '' ? AREA.city[provinceName].filter(function (item) {\n                return item.Name === cityName;\n            })[0].ID : '',\n            regionId = regionName != '' ? AREA.region[cityName].filter(function (item) {\n                return item.Name === regionName;\n            })[0].ID : '';\n\n        return [provinceId, cityId, regionId][name.length - 1];\n    },\n    /**\n     * 根据Id组获取地区组名称 如0601转换为'浙江-杭州'\n     * @param {String} id 地区ID如'06'（或ID组如'0601'）\n     * @param {String} [sep='-'] 分隔符\n     * @returns {String}\n     */\n    getAreaNameById: function (id, sep) {\n        sep = sep || '-';\n        var provinceId = id.substr(0, 2),\n            cityId = id.length > 2 ? id.substr(0, 4) : '',\n            regionId = id.length > 4 ? id.substr(0, 6) : '',\n            provinceName = provinceId !== '' ? AREA.province.filter((item)=> {\n                return item.ID === provinceId;\n            })[0].Name : '',\n            cityName = cityId !== '' ? AREA.city[provinceName].filter((item)=> {\n                return item.ID === cityId;\n            })[0].Name : '',\n            regionName = regionId !== '' ? AREA.region[cityName].filter((item)=> {\n                return item.ID === regionId;\n            })[0].Name : '';\n\n        if (id.length === 2) {\n            return provinceName;\n        } else if (id.length === 4) {\n            return provinceName + sep + cityName;\n        } else if (id.length == 6) {\n            return provinceName + sep + cityName + sep + regionName;\n        }\n    },\n    /**\n     * 获取具体province下的city\n     * @param {String} provinceName province名称\n     * @return {Array} province名称下的所有city组成的数组，其中每项是一个对象，包含单一city的ID和Name\n     */\n    getCitiesOfProvinceName: function (provinceName) {\n        var cities = AREA.city[provinceName],\n            citiesData = [];\n        if (typeof cities !== 'undefined') {\n            for (var c in cities) {\n                if (cities.hasOwnProperty(c)) {\n                    citiesData.push(cities[c]);\n                }\n            }\n        }\n        return citiesData;\n    },\n    /**\n     * 获取具体city下的region\n     * @param {String} cityName city名称\n     * @return {Array} city名称下的所有region组成的数组，其中每项是一个对象，包含单一region的ID和Name\n     */\n    getRegionsOfCityName: function (cityName) {\n        var regions = AREA.region[cityName],\n            regionsData = [];\n        if (typeof regions !== 'undefined') {\n            for (var r in regions) {\n                if (regions.hasOwnProperty(r)) {\n                    regionsData.push(regions[r]);\n                }\n            }\n        }\n        return regionsData;\n    },\n    /**\n     * 将扁平的数据结构变成树状结构\n     * @param {String} [childrenKey='children'] 表示层级的key名称\n     * @returns {Array}\n     */\n    areaTransfer: function (childrenKey) {\n        childrenKey = childrenKey || 'children';\n        var provincesData = AREA.province,\n            that = this;\n\n        provincesData.map(function (province) {\n            var provinceName = province.Name,\n                citiesData = that.getCitiesOfProvinceName(provinceName);\n            province[childrenKey] = citiesData;\n            citiesData.map(function (city) {\n                city[childrenKey] = that.getRegionsOfCityName(city.Name);\n            })\n        });\n        return provincesData;\n    }\n});\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/areaDataFormat.js\n// module id = 9\n// module chunks = 0\n//# sourceURL=webpack:///./src/areaDataFormat.js?");

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	eval("/**\n * @author rubyisapm\n */\n!(module.exports = {\n    list:{\n        needSearch:'请点击搜索',\n        noData:'没有数据',\n        defaultError:'请求出错'\n    }\n});\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/info.js\n// module id = 10\n// module chunks = 0\n//# sourceURL=webpack:///./src/info.js?");

/***/ }
/******/ ])
});
;