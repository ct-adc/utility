(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["ct-utility"] = factory();
	else
		root["ct-utility"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_RESULT__;/**\r\n * @author rubyisapm\r\n */\r\n!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {\r\n    var base = __webpack_require__(1),\r\n        objTransfer = __webpack_require__(2),\r\n        cookie = __webpack_require__(3),\r\n        localStorage = __webpack_require__(4),\r\n        sessionStorage = __webpack_require__(5),\r\n        URIParser = __webpack_require__(6),\r\n        numberFormat = __webpack_require__(7),\r\n        dateFilter = __webpack_require__(8),\r\n        areaDataFormat = __webpack_require__(9),\r\n        INFO = __webpack_require__(10),\r\n        scrollbar = __webpack_require__(11);\r\n\r\n    return {\r\n        base: base,\r\n        objTransfer: objTransfer,\r\n        cookie: cookie,\r\n        localStorage: localStorage,\r\n        sessionStorage: sessionStorage,\r\n        URIParser: URIParser,\r\n        numberFormat: numberFormat,\r\n        dateFilter: dateFilter,\r\n        areaDataFormat:areaDataFormat,\r\n        INFO: INFO,\r\n        scrollbar: scrollbar\r\n    };\r\n}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./index.js\n// module id = 0\n// module chunks = 0\n//# sourceURL=webpack:///./index.js?");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	eval("/**\r\n * @author rubyisapm\r\n */\r\n!(module.exports = {\r\n    /**\r\n     * 获取字符串的字节长度\r\n     * @param str\r\n     * @returns {number}\r\n     */\r\n    getByteLen: function (str) {\r\n        var str1=str.replace(/([^\\x00-\\xff])/ig,'$1 ');\r\n        return str1.length;\r\n    },\r\n    /**\r\n     * 按字节截取内容\r\n     * @param source 原字符串\r\n     * @param length 要截取的长度\r\n     * @param halfCut 是否要舍弃半个中文\r\n     * @returns {string}\r\n     */\r\n    subByte: function (source,length,halfCut) {\r\n        var sliced=(source + '').substr(0, length).replace(/([^\\x00-\\xff])/g, '$1 ').substr(0, length).replace(/([^\\x00-\\xff]) /g, '$1');\r\n        if(halfCut && this.getByteLen(sliced)>length){\r\n            sliced=sliced.substr(0,sliced.length-1);\r\n        }\r\n        return sliced;\r\n    },\r\n    /**\r\n     * 将字符串的首字母大写\r\n     * @param {string} str 原字符串\r\n     * @returns {string} 转换后的字符串\r\n     */\r\n    upperCaseFirst: function (str) {\r\n        str = str + '';\r\n        return str.replace(/^[a-z]/, function (firstLetter) {\r\n            return firstLetter.toUpperCase();\r\n        })\r\n    },\r\n    /**\r\n     * 将字符串的首字母小写\r\n     * @param {string} str 原字符串\r\n     * @returns {string} 转换后的字符串\r\n     */\r\n    lowerCaseFirst: function (str) {\r\n        str = str + '';\r\n        return str.replace(/^[A-Z]/, function (firstLetter) {\r\n            return firstLetter.toLowerCase();\r\n        })\r\n    },\r\n    /**\r\n     * 判断一个值是不是window对象\r\n     * @param obj\r\n     * @returns {boolean}\r\n     */\r\n    isWindow: function (obj) {\r\n        return obj != null && obj === obj.window;\r\n    },\r\n    /**\r\n     * 判断一个值是不是数组\r\n     * @param {*} val 要判断的值\r\n     * @returns {boolean} 是否为数组\r\n     */\r\n    isArray: function (val) {\r\n        return Array.isArray(val);\r\n    },\r\n    /**\r\n     * 判断一个值是不是对象\r\n     * @param {*} val 要判断的值\r\n     * @returns {boolean} 是否为数组\r\n     */\r\n    isObject: function (val) {\r\n        return typeof val === 'object' && !this.isArray(val);\r\n    },\r\n    /**\r\n     * 判断一个值是不是纯文本对象\r\n     * 即其属性不是对象/dom节点/window\r\n     * @param obj\r\n     * @returns {boolean}\r\n     */\r\n    isPlainObject: function (obj) {\r\n        if (!this.isObject(obj) || obj.nodeType || this.isWindow(obj)) {\r\n            return false;\r\n        }\r\n        if (obj.constructor && !obj.constructor.prototype.hasOwnProperty('isPrototypeOf')) {\r\n            return false;\r\n        }\r\n        return true;\r\n    },\r\n    /**\r\n     * 判断一个值是不是JSON\r\n     * @param val\r\n     * @returns {boolean}\r\n     */\r\n    isJSON: function (val) {\r\n        try {\r\n            var result = JSON.parse(val);\r\n            return typeof result === 'object';\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    },\r\n    /**\r\n     * 判断一个值是不是函数\r\n     * @param val\r\n     * @returns {boolean}\r\n     */\r\n    isFunction: function (val) {\r\n        return typeof val === 'function';\r\n    },\r\n    /**\r\n     * 判断一个值是不是正则表达式\r\n     * @param obj\r\n     * @returns {boolean}\r\n     */\r\n    isRegExp: function (obj) {\r\n        return Object.prototype.toString.call(obj) === \"[object RegExp]\";\r\n    },\r\n\r\n    extend: function () {\r\n        var options, name, src, copy, copyIsArray, clone,\r\n            target = arguments[0] || {},\r\n            i = 1,\r\n            length = arguments.length,\r\n            deep = false;\r\n\r\n        // Handle a deep copy situation\r\n        if (typeof target === \"boolean\") {\r\n            deep = target;\r\n\r\n            // Skip the boolean and the target\r\n            target = arguments[i] || {};\r\n            i++;\r\n        }\r\n\r\n        // Handle case when target is a string or something (possible in deep copy)\r\n        if (typeof target !== \"object\" && !this.isFunction(target)) {\r\n            target = {};\r\n        }\r\n\r\n        // Extend jQuery itself if only one argument is passed\r\n        if (i === length) {\r\n            target = this;\r\n            i--;\r\n        }\r\n\r\n        for (; i < length; i++) {\r\n\r\n            // Only deal with non-null/undefined values\r\n            if (( options = arguments[i] ) != null) {\r\n\r\n                // Extend the base object\r\n                for (name in options) {\r\n                    src = target[name];\r\n                    copy = options[name];\r\n\r\n                    // Prevent never-ending loop\r\n                    if (target === copy) {\r\n                        continue;\r\n                    }\r\n\r\n                    // Recurse if we're merging plain objects or arrays\r\n                    if (deep && copy && ( this.isPlainObject(copy) ||\r\n                        ( copyIsArray = this.isArray(copy) ) )) {\r\n\r\n                        if (copyIsArray) {\r\n                            copyIsArray = false;\r\n                            clone = src && this.isArray(src) ? src : [];\r\n\r\n                        } else {\r\n                            clone = src && this.isPlainObject(src) ? src : {};\r\n                        }\r\n\r\n                        // Never move original objects, clone them\r\n                        target[name] = this.extend(deep, clone, copy);\r\n\r\n                        // Don't bring in undefined values\r\n                    } else if (copy !== undefined) {\r\n                        target[name] = copy;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // Return the modified object\r\n        return target;\r\n    },\r\n\r\n    /**\r\n     * 检测对象是否为空对象\r\n     * @param {?Object} obj 要检测的对象，null会被检测为空对象\r\n     * @returns {boolean}\r\n     */\r\n    isEmptyObject: function (obj) {\r\n        for (var i in obj) {\r\n            return false;\r\n        }\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * 获取一个对象中具体key[组]的值，原样输出，如果为引用类型则保持引用\r\n     * @param {Object|Array} obj 对象\r\n     * @param {String} key key[组]\r\n     * @returns {*} key[组]对应的值\r\n     */\r\n    getObjValByKey: function (obj, key) {\r\n        key = key.split('.');\r\n        var result = obj;\r\n        key.map(function (item) {\r\n            result = result[item];\r\n        });\r\n        return result;\r\n    },\r\n    /**\r\n     * 设置一个对象中具体key[组]的值，可以为具体的值或者处理方法\r\n     * @param {Object} obj 对象\r\n     * @param {String} key key[组]\r\n     * @param {*} valOrFn 设置的值或者处理方法(方法接受两个参数:key所在的对象，最后的key)\r\n     * @returns {*}\r\n     */\r\n    setObjValByKey:function(obj,key,valOrFn){\r\n        var that=this;\r\n        key = key.split('.');\r\n        var result={},\r\n            targetClone = JSON.parse(JSON.stringify(obj)),\r\n            pointer=[targetClone];\r\n        //targetClone用于逐渐定位至目标key\r\n        if(typeof that.setObjValByKey.$rules==='undefined'){\r\n            //内置规则\r\n            that.setObjValByKey.$rules= {\r\n                '$null2str':function(obj,key){\r\n                    if(obj[key]===null){\r\n                        obj[key]='';\r\n                    }\r\n                },// null -> ''\r\n                '$null2zero':function(obj,key){\r\n                    if(obj[key]===null){\r\n                        obj[key]=0;\r\n                    }\r\n                },// null -> 0\r\n                '$null2arr':function(obj,key){\r\n                    if(obj[key]===null){\r\n                        obj[key]=[];\r\n                    }\r\n                },// null -> []\r\n                '$null2obj':function(obj,key){\r\n                    if(obj[key]===null){\r\n                        obj[key]={};\r\n                    }\r\n                },// null -> {}\r\n                '$empty2zero-strict':function(obj,key){\r\n                    if(obj[key]===''){\r\n                        obj[key]=0;\r\n                    }\r\n                },// '' -> 0\r\n                '$empty2zero-relaxed':function(obj,key){\r\n                    if(/^\\s*$/.test(obj[key])){\r\n                        obj[key]=0;\r\n                    }\r\n                },// '  ' || '' -> 0\r\n                '$trim':function(obj,key){\r\n                    if(typeof obj[key]==='string'){\r\n                        obj[key]=obj[key].replace(/(^\\s*|\\s*$)/g, '');\r\n                    }\r\n                }// 去掉前后空格\r\n            };\r\n        }\r\n\r\n        key.map(function (key,index,arr) {\r\n            if(index===arr.length-1 && typeof pointer[pointer.length-1]!=='undefined'){\r\n                if(!that.isObject(pointer[pointer.length-1])){\r\n                    console.log('warning from ct-ct-utility:setObjValBykey中key所属的不是一个对象(你可能正在给非对象添加属性!)');\r\n                }\r\n                if(typeof valOrFn==='function'){\r\n                    valOrFn(pointer[pointer.length-1],key);\r\n                }else if(typeof valOrFn==='string' && valOrFn.indexOf('$')===0 && typeof that.setObjValByKey.$rules[valOrFn] !=='undefined'){\r\n                    //当匹配到内置规则时，使用内置规则对目标值做转换\r\n                    that.setObjValByKey.$rules[valOrFn](pointer[pointer.length-1],key);\r\n                }else{\r\n                    pointer[pointer.length-1][key]=valOrFn;\r\n                }\r\n            }else{\r\n                if(typeof pointer[pointer.length-1][key]!=='undefined'){\r\n                    pointer.push(pointer[pointer.length-1][key]);\r\n                }\r\n            }\r\n        });\r\n        //在原对象中更新targetClone对目标key的变化\r\n        this.extend(true,result,obj,targetClone);\r\n        return result;\r\n    },\r\n\r\n    /**\r\n     * 判断浏览器是否支持storage\r\n     * @param {string} type 'localStorage'/'sessionStorage'\r\n     * @returns {boolean}\r\n     */\r\n    isStorageAvailable: function (type) {\r\n        try {\r\n            var x = '__storage_test__',\r\n                storage = window[type];\r\n            storage.setItem(x, x);\r\n            storage.removeItem(x);\r\n            return true;\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n})\r\n;\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/base.js\n// module id = 1\n// module chunks = 0\n//# sourceURL=webpack:///./src/base.js?");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_RESULT__;/**\r\n * @author rubyisapm\r\n */\r\n!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {\r\n    var base = __webpack_require__(1);\r\n\r\n    /**\r\n     * 按照给定的规则转换原对象中的key的格式\r\n     * @param {Function} transfer 转换函数\r\n     * @param {?Object} obj 原对象\r\n     * @returns {?Object} obj 转换后的对象\r\n     */\r\n    function transferKeyInObj(transfer, obj, jsonTransfer) {\r\n        if (obj === null) {\r\n            return obj;\r\n        }\r\n        var newObj = {},\r\n            keys = Object.keys(obj);\r\n        if (keys.length === 0) {\r\n            return obj;\r\n        }\r\n        keys.map(function (key) {\r\n            var val = obj[key],\r\n                newKey = transfer(key);\r\n            if (base.isObject(val)) {\r\n                newObj[newKey] = transferKeyInObj(transfer, val, jsonTransfer);\r\n            } else if (base.isArray(val)) {\r\n                newObj[newKey] = transferKeyInArray(transfer, val, jsonTransfer);\r\n            } else if (base.isJSON(val) && jsonTransfer) {\r\n                newObj[newKey] = JSON.stringify(transferKeyInJSON(transfer, val, jsonTransfer));\r\n            } else {\r\n                newObj[newKey] = val;\r\n            }\r\n        });\r\n        return newObj;\r\n    }\r\n\r\n    /**\r\n     * 按照给定的规则转换原数组中的对象中的key的格式\r\n     * @param {Function} transfer 转换函数\r\n     * @param {Array} arr 原对象\r\n     * @returns {?Object} obj 转换后的对象\r\n     */\r\n    function transferKeyInArray(transfer, arr, jsonTransfer) {\r\n        if (arr.length == 0) {\r\n            return arr;\r\n        }\r\n        var newArray = [];\r\n        arr.map(function (item, index) {\r\n            if (base.isArray(item)) {\r\n                newArray[index] = transferKeyInArray(transfer, item, jsonTransfer);\r\n            } else if (base.isObject(item)) {\r\n                newArray[index] = transferKeyInObj(transfer, item, jsonTransfer);\r\n            } else if (base.isJSON(item) && jsonTransfer) {\r\n                newArray[index] = JSON.stringify(transferKeyInJSON(transfer, item, jsonTransfer));\r\n            } else {\r\n                newArray[index] = item;\r\n            }\r\n        });\r\n        return newArray;\r\n    }\r\n\r\n    /**\r\n     * 按照给定的规则转换原json字符串中的key的格式\r\n     * @param {Function} transfer\r\n     * @param {String} json\r\n     */\r\n    function transferKeyInJSON(transfer, json) {\r\n        var jsonObj = JSON.parse(json);\r\n        if (base.isArray(jsonObj)) {\r\n            return transferKeyInArray(transfer, jsonObj, true);\r\n        } else if (base.isObject(jsonObj)) {\r\n            return transferKeyInObj(transfer, jsonObj, true);\r\n        } else if (base.isJSON(jsonObj)) {\r\n            return transferKeyInJSON(transfer, jsonObj, true)\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * 去除对象中某些属性值的前后空格\r\n     * @param {object} obj 原对象\r\n     * @param {array} keys 要修改的key，支持以.分隔的串联属性如app.id\r\n     * @returns {*} 处理后的对象\r\n     */\r\n    function trimSomeInObj(obj, keys) {\r\n        var objClone = JSON.parse(JSON.stringify(obj));\r\n        keys.map(function (key) {\r\n            objClone = base.setObjValByKey(objClone, key, function (obj, key) {\r\n                obj[key] = obj[key].replace(/(^\\s*|\\s*$)/g, '');\r\n            });\r\n        });\r\n        return objClone;\r\n    }\r\n\r\n    /**\r\n     * 去除数组中单一项的某些属性值的前后空格\r\n     * @param {Array} arr 原数组\r\n     * @param {Array} keys 要修改的key，支持以.分隔的串联属性如app.id\r\n     * @returns {*} 处理后的数组\r\n     */\r\n    function trimSomeInArray(arr, keys) {\r\n        return arr.map(function(item){\r\n            return trimSomeInObj(item,keys);\r\n        })\r\n    }\r\n\r\n    /**\r\n     * 以具体的方式转换对象中的key\r\n     * @param {Object} obj 原对象\r\n     * @param {Array} rules 规则定义\r\n     * @param {Array} rules[].keys 每项为要转换的key\r\n     * @param {String | Function} rules[].rule 转换规则\r\n     */\r\n    function transferSomeInObj(obj,rules){\r\n        var objClone = JSON.parse(JSON.stringify(obj));\r\n        rules.map(function(item){\r\n            var keys=item.keys,\r\n                transfer=item.rule;\r\n            keys.map(function (key) {\r\n                objClone = base.setObjValByKey(objClone, key, transfer);\r\n            });\r\n        });\r\n        return objClone;\r\n    }\r\n\r\n    /**\r\n     * 以具体的方式转换对象中的key\r\n     * @param {Array} arr 原数组\r\n     * @param {Array} rules 规则定义\r\n     * @param {Array} rules[].keys 每项为要转换的key\r\n     * @param {String | Function} rules[].rule 转换规则\r\n     */\r\n    function transferSomeInArray(arr,rules){\r\n        return arr.map(function(item){\r\n            return trimSomeInObj(item,rules);\r\n        })\r\n    }\r\n\r\n    return {\r\n        /**\r\n         * 将原对象中的key的首字母小写\r\n         * @param {Object} obj 原对象\r\n         * @param {Boolean} jsonTransfer 是否转换json中的内容\r\n         * @returns {Object} 转换后的对象\r\n         */\r\n        upperKey: function (obj, jsonTransfer) {\r\n            if (base.isArray(obj)) {\r\n                return transferKeyInArray(base.upperCaseFirst, obj, jsonTransfer);\r\n            } else {\r\n                return transferKeyInObj(base.upperCaseFirst, obj, jsonTransfer);\r\n            }\r\n        },\r\n        /**\r\n         * 将原对象中的key的首字母小写\r\n         * @param {Object} obj 原对象\r\n         * @param {Boolean} jsonTransfer 是否转换json中的内容\r\n         * @returns {Object} 转换后的对象\r\n         */\r\n        lowerKey: function (obj, jsonTransfer) {\r\n            if (base.isArray(obj)) {\r\n                return transferKeyInArray(base.lowerCaseFirst, obj, jsonTransfer);\r\n            } else {\r\n                return transferKeyInObj(base.lowerCaseFirst, obj, jsonTransfer);\r\n            }\r\n        },\r\n        trimSome: function(obj,keys){\r\n            if (base.isArray(obj)) {\r\n                return trimSomeInArray(obj,keys);\r\n            } else {\r\n                return trimSomeInObj(obj,keys);\r\n            }\r\n        },\r\n        transferSome:function(obj,rules){\r\n            if (base.isArray(obj)) {\r\n                return transferSomeInArray(obj,rules);\r\n            } else {\r\n                return transferSomeInObj(obj,rules);\r\n            }\r\n        }\r\n    }\r\n}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/objTransfer.js\n// module id = 2\n// module chunks = 0\n//# sourceURL=webpack:///./src/objTransfer.js?");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_RESULT__;/**\r\n * @author liwei\r\n */\r\n\r\n\r\n!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * 获取 cookie\r\n\t * @param  {String} sKey 键名\r\n\t * @return {String}      键名\r\n\t */\r\n\tfunction get(sKey) {\r\n\t\treturn decodeURIComponent(document.cookie.replace(new RegExp('(?:(?:^|.*;)\\\\s*' + encodeURIComponent(sKey).replace(/[\\-\\.\\+\\*]/g, '\\\\$&') + '\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$'), '$1')) || null;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置 cookie\r\n\t * @param {String} sKey    键名\r\n\t * @param {String} sValue  键值\r\n\t * @param {[type]} vEnd    过期时间\r\n\t * @param {String} sPath   路径\r\n\t * @param {String} sDomain 域名\r\n\t * @param {Boolean} bSecure 安全\r\n\t */\r\n\tfunction set(sKey, sValue, vEnd, sPath, sDomain, bSecure) {\r\n\t\tvar sExpires = '';\r\n\r\n\t\tif ( !sKey || /^(?:expires|max\\-age|path|domain|secure)$/i.test(sKey) ) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (vEnd) {\r\n\t\t\tswitch (vEnd.constructor) {\r\n\t\t\t\tcase Number:\r\n\t\t\t\t\tsExpires = vEnd === Infinity ? '; expires=Fri, 31 Dec 9999 23:59:59 GMT' : '; max-age=' + vEnd;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase String:\r\n\t\t\t\t\tsExpires = '; expires=' + vEnd;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\t\r\n\t\t\t\tcase Date:\r\n\t\t\t\t\tsExpires = '; expires=' + vEnd.toUTCString();\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tdocument.cookie = encodeURIComponent( sKey ) + '=' + encodeURIComponent( sValue ) +\r\n\t\t\tsExpires +\r\n\t\t\t(sDomain ? '; domain=' + sDomain : '') +\r\n\t\t\t(sPath ? '; path=' + sPath : '') +\r\n\t\t\t(bSecure ? '; secure' : '');\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * 移除某个 cookie\r\n\t * @param  {String} sKey    键名\r\n\t * @param  {String} sPath   路径\r\n\t * @param  {String} sDomain 域名\r\n\t * @return {Boolean}        true-删除成功，false-删除失败\r\n\t */\r\n\tfunction remove(sKey, sPath, sDomain) {\r\n\t\tif ( !sKey || !has(sKey) ) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tdocument.cookie = encodeURIComponent(sKey) + '=; expires=Thu, 01 Jan 1970 00:00:00 GMT' +\r\n\t\t\t\t\t\t\t(sDomain ? '; domain=' + sDomain : '') +\r\n\t\t\t\t\t\t\t\t(sPath ? '; path=' + sPath : '');\r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * 判断是否拥有某个 key\r\n\t * @param  {String}  sKey 键名\r\n\t * @return {Boolean}\r\n\t */\r\n\tfunction has(sKey) {\r\n\t\tvar patt = new RegExp( '(?:^|;\\\\s*)' + encodeURIComponent( sKey ).replace(/[\\-\\.\\+\\*]/g, '\\\\$&') + '\\\\s*\\\\=' );\r\n\r\n\t\treturn patt.test( document.cookie );\r\n\t}\r\n\r\n\t/**\r\n\t * 获取\r\n\t * @return {Object} 所有的 cookie 键值对\r\n\t */\r\n\tfunction keys() {\r\n\t\tvar map     = {},\r\n\t\t\tallKeys = document.cookie.\r\n\t\t\t\t\t\treplace(/((?:^|\\s*;)[^\\=]+)(?=;|$)|^\\s*|\\s*(?:\\=[^;]*)?(?:\\1|$)/g, '').\r\n\t\t\t\t\t\t\tsplit( /\\s*(?:\\=[^;]*)?;\\s*/ );\r\n\r\n\r\n\t\tallKeys.forEach(function( key ) {\r\n\t\t\tmap[ decodeURIComponent(key) ] = get( key );\r\n\t\t});\r\n\r\n\t\treturn map;\r\n\t}\r\n\r\n\treturn {\r\n\t\tget    : get,\r\n\t\tset    : set,\r\n\t\tremove : remove,\r\n\t\thas    : has,\r\n\t\tkeys   : keys\r\n\t};\r\n}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/cookie.js\n// module id = 3\n// module chunks = 0\n//# sourceURL=webpack:///./src/cookie.js?");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_RESULT__;/*!\r\n * @author liwei\r\n */\r\n\r\n!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\r\n\t'use strict';\r\n\r\n\tvar base = __webpack_require__(1);\r\n\r\n\tvar IS_LOCAL_STORAGE_AVAILABLE = base.isStorageAvailable( 'localStorage' );\r\n\r\n\t/**\r\n\t * 设置一个 storage\r\n\t * @param {String} sKey   键名\r\n\t * @param {String} sValue 键值\r\n\t */\r\n\tfunction set( sKey, sValue ) {\r\n\t\tif ( IS_LOCAL_STORAGE_AVAILABLE ) {\r\n\t\t\tlocalStorage.setItem( sKey, sValue );\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 获取 storage\r\n\t * @param  {String} sKey 键名\r\n\t * @return {String}      键值\r\n\t */\r\n\tfunction get( sKey ) {\r\n\t\tif ( IS_LOCAL_STORAGE_AVAILABLE ) {\r\n\r\n\t\t\treturn localStorage.getItem( sKey );\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 清除所有 storage\r\n\t */\r\n\tfunction clear() {\r\n\t\tif ( IS_LOCAL_STORAGE_AVAILABLE ) {\r\n\r\n\t\t\tlocalStorage.clear();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 删除一个 storage\r\n\t * @param  {String} sKey 键名\r\n\t */\r\n\tfunction remove( sKey ) {\r\n\t\tif ( IS_LOCAL_STORAGE_AVAILABLE ) {\r\n\r\n\t\t\tlocalStorage.removeItem( sKey );\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tset: set,\r\n\t\tget: get,\r\n\t\tclear: clear,\r\n\t\tremove: remove\r\n\t};\r\n}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/localStorage.js\n// module id = 4\n// module chunks = 0\n//# sourceURL=webpack:///./src/localStorage.js?");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_RESULT__;/*!\r\n * @author liwei\r\n */\r\n\r\n\r\n!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\r\n\t'use strict';\r\n\r\n\tvar base = __webpack_require__(1);\r\n\r\n\tvar IS_SESSION_STORAGE_AVAILABLE = base.isStorageAvailable( 'sessionStorage' );\r\n\r\n\t/**\r\n\t * 设置一个 storage\r\n\t * @param {String} sKey   键名\r\n\t * @param {String} sValue 键值\r\n\t */\r\n\tfunction set( sKey, sValue ) {\r\n\t\tif ( IS_SESSION_STORAGE_AVAILABLE ) {\r\n\r\n\t\t\tsessionStorage.setItem( sKey, sValue );\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 获取 storage\r\n\t * @param  {String} sKey 键名\r\n\t * @return {String}      键值\r\n\t */\r\n\tfunction get( sKey ) {\r\n\t\tif ( IS_SESSION_STORAGE_AVAILABLE ) {\r\n\r\n\t\t\treturn sessionStorage.getItem( sKey );\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 清除所有 storage\r\n\t */\r\n\tfunction clear() {\r\n\t\tif ( IS_SESSION_STORAGE_AVAILABLE ) {\r\n\t\t\t\r\n\t\t\tsessionStorage.clear();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 删除一个 storage\r\n\t * @param  {String} sKey 键名\r\n\t */\r\n\tfunction remove( sKey ) {\r\n\t\tif ( IS_SESSION_STORAGE_AVAILABLE ) {\r\n\r\n\t\t\tsessionStorage.removeItem( sKey );\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tset: set,\r\n\t\tget: get,\r\n\t\tclear: clear,\r\n\t\tremove: remove\r\n\t};\r\n}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sessionStorage.js\n// module id = 5\n// module chunks = 0\n//# sourceURL=webpack:///./src/sessionStorage.js?");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_RESULT__;/**\r\n * @author rubyisapm\r\n */\r\n!(__WEBPACK_AMD_DEFINE_RESULT__ = function(){\r\n    var base=__webpack_require__(1);\r\n    /**\r\n     * 将查询字符串解析为查询参数数组\r\n     * @param {string} search\r\n     */\r\n    function searchToParamGroup(search){\r\n        var paramGroup={};\r\n        if(search!==''){\r\n            search.replace(/(\\?|&|\\b)(([^=?&]+)=([^=&]*))/g,function(_,_,$1,$2,$3){\r\n                paramGroup[$2]=$3;\r\n            });\r\n        }\r\n        return paramGroup;\r\n    }\r\n\r\n    /**\r\n     * URL解析并返回对应的参数\r\n     * @param {string} uri uri\r\n     * @returns {{protocol: *, hostname: *, port: *, pathname: *, search: *, hash: *, host: *}}\r\n     */\r\n    function uriParser(uri){\r\n        var parser = document.createElement('a');\r\n        parser.href = uri;\r\n        return {\r\n            protocol:parser.protocol,\r\n            hostname:parser.hostname,\r\n            port:parser.port,\r\n            pathname:parser.pathname,\r\n            search:parser.search,\r\n            hash:parser.hash,\r\n            host:parser.host\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 获取url中指定参数的值\r\n     * @param {string} uri 要解析的url\r\n     * @param {string} param 要获取的查询参数的key值\r\n     * @returns {undefined | string}\r\n     */\r\n    function getParam(uri,param){\r\n        var paramGroup=searchToParamGroup(uriParser(uri).search);\r\n        if(!base.isEmptyObject(paramGroup)){\r\n            return paramGroup[param];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取url中的参数集合\r\n     * @param {string} uri 要解析的url\r\n     * @returns {object}\r\n     */\r\n    function getParamGroup(uri){\r\n        return searchToParamGroup(uriParser(uri).search);\r\n    }\r\n\r\n\r\n    return{\r\n        uriParser:uriParser,\r\n        getParamGroup:getParamGroup,\r\n        getParam:getParam,\r\n        searchToParamGroup:searchToParamGroup\r\n    };\r\n}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/URIParser.js\n// module id = 6\n// module chunks = 0\n//# sourceURL=webpack:///./src/URIParser.js?");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

	eval("/**\r\n * Created by wx-wangxiang on 17/01/03.\r\n */\r\n!(module.exports = {\r\n\t//将字符串转化为数字\r\n\ttoInt: function(str){\r\n\t    return parseInt(str, 10) || 0;\r\n\t},\r\n\t/**\r\n\t * 补零操作\r\n\t * @param  {int} num    需要进行补零操作的参数\r\n\t * @param  {int} digits 想要拓展的位数\r\n\t * @return {string}     补零操作后的数字\r\n\t */\r\n\tzeroFill: function(num, digits) {\r\n\t\tvar num = '' + num; //将数字转为字符串的简便方法，同样的如果将数字字符串转为数字可以在其前面加上\"+\"号\r\n\t\twhile(num.length < digits) {\r\n\t\t\tnum = '0' + num;\r\n\t\t}\r\n\t\treturn num;\r\n\t},\r\n    split: function(num, len, sep) {\r\n\t    len = len || 3; // 默认3位分割\r\n\t    sep = sep || ','; // 默认分隔符为 ','\r\n\r\n        // \\B   匹配非单词边界（单词字符包括：a-z、A-Z、0-9，以及下划线）\r\n        // ?=n  匹配任何其后紧接指定字符串 n 的字符串\r\n        // (?:x)    匹配 x 不会捕获匹配项。这被称为非捕获括号（non-capturing parentheses）。匹配项不能够从结果数组的元素 [1], ..., [n] 或已被定义的 RegExp 对象的属性 $1, ..., $9 再次访问到。\r\n        // x(?!y)   只有当 x 后面不是紧跟着 y 时，才匹配 x。例如，/\\d+(?!\\.)/ 只有当一个数字后面没有紧跟着一个小数点时，才会匹配该数字。/\\d+(?!\\.)/.exec(\"3.141\") 匹配 141 而不是 3.141。\r\n        // 嗯，合起来就懵逼了吧= =\r\n        var reg = new RegExp('\\\\B(?=(?:\\\\d{' + len + '})+(?!\\\\d))', 'g');\r\n\r\n        // 把数字以小数点分割：parts[0] 整数部分，parts[1] 小数部分\r\n        var parts = (num + '').split('.');\r\n\r\n        // 如果整数部分大于需要分割的位数\r\n        if (parts[0].length > len) {\r\n            parts[0] = parts[0].replace(reg, sep);\r\n        }\r\n\r\n        return parts.join('.');\r\n    }\r\n})\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/numberFormat.js\n// module id = 7\n// module chunks = 0\n//# sourceURL=webpack:///./src/numberFormat.js?");

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_RESULT__;/**\r\n * @author wangxiang\r\n */\r\n!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\r\n\tvar numberFormat = __webpack_require__(7),\r\n\t\trdateFormat = /((?:[^yMdHhmsaZE']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z))(.*)/,\r\n    \traspnetjson = /^\\/Date\\((\\d+)\\)\\/$/, //匹配 /Date(12345)/ 类型的字符串\r\n\t\tDATE_FORMATS = {\r\n\t\tyyyy: dateGetter(\"FullYear\", 4), //对年份进行四位数的显示 如：2017/01/06\r\n\t\tyy: dateGetter(\"FullYear\", 2, 0, true), //对年份进行两位数的显示 如：17/01/06\r\n\t\ty: dateGetter(\"FullYear\", 1), //年份的一般的显示 如：2017/01/06\r\n\t\tMM: dateGetter(\"Month\", 2, 1), //对于月份的单个数字会进行补零, 如：2017/01/06\r\n\t  \tM: dateGetter(\"Month\", 1, 1), //对于月份的单个数字不会进行补零, 如：2017/1/06\r\n\t  \tdd: dateGetter(\"Date\", 2), //对于日期的单个数字会进行补零, 如：2017/01/06\r\n\t  \td: dateGetter(\"Date\", 1), //对于日期的单个数字不会补零, 如：2017/01/6\r\n\t  \tHH: dateGetter(\"Hours\", 2), //对于小时的单个数字会进行补零,并且是24小时制 如：2017/01/06 08:01\r\n\t  \tH: dateGetter(\"Hours\", 1), //对于小时的单个数字不会进行补零,并且是24小时制 如：2017/01/06 8:01\r\n\t  \thh: dateGetter(\"Hours\", 2, -12), //对于小时的单个数字会进行补零,并且是12小时制 如：2017/01/06 08:01\r\n\t  \th: dateGetter(\"Hours\", 1, -12), //对于小时的单个数字不会进行补零,并且是12小时制 如：2017/01/06 8:01\r\n\t  \tmm: dateGetter(\"Minutes\", 2), //对于分钟的单个数字会进行补零 如：2017/03/06 08:01\r\n\t  \tm: dateGetter(\"Minutes\", 1), //对于分钟的单个数字不会进行补零 如：2017/03/06 08:1\r\n\t  \tss: dateGetter(\"Seconds\", 2), //对于秒数的单个数字会进行补零 如：2017/03/06 08:01:09\r\n\t  \ts: dateGetter(\"Seconds\", 1) //对于秒数的单个数字会进行补零 如：2017/03/06 08:01:9\r\n\t};\r\n\t/**\r\n\t * 根据不同的日期format,获取相应的年，月，日，时，分，秒的显示格式\r\n\t * @param  {string} name   函数通过该参数执行不同的时间操作的方法\r\n\t * @param  {int} size   日期显示的位数\r\n\t * @param  {int} offset 时间显示的格式，12小时制还是24小时制(用于小时的显示)\r\n\t * @param  {boolean} trim   用于年份的两位数的显示\r\n\t * @return {Function}        返回数字格式化方法\r\n\t */\r\n\tfunction dateGetter(name, size, offset, trim) {\r\n\t    return function (date) {\r\n\t\t    var value = date[\"get\" + name]();\r\n\t\t    if (offset > 0 || value > -offset){\r\n\t\t      \tvalue += offset;\r\n\t\t    }\r\n\t\t    if (value === 0 && offset === -12) {\r\n\t\t      \tvalue = 12;\r\n\t\t    }\r\n\t\t    return padNumber(value, size, trim);\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * 数字格式化\r\n\t * @param  {int} num    获得的日期\r\n\t * @param  {[type]} digits 日期要显示的位数\r\n\t * @param  {boolean} trim   年份是否是两位数显示\r\n\t * @return {string}        返回格式化后的数字\r\n\t */\r\n\tfunction padNumber(num, digits, trim) {\r\n\t\tvar neg = '';\r\n\t\tif (num < 0) {\r\n\t\t    neg = '-';\r\n\t\t    num = -num;\r\n\t\t}\r\n\t\tnum = numberFormat.zeroFill(num, digits); //补零操作\r\n\t\tif (trim){\r\n\t\t    num = num.substr(num.length - digits);\r\n\t\t}\r\n\t\treturn neg + num;\r\n\t}\r\n\t/**\r\n\t * 日期格式化\r\n\t * @param  {obj} date   日期对象\r\n\t * @param  {string} format 格式化的方式\r\n\t * @return {string}        格式化后的日期\r\n\t */\r\n\tfunction dateFilter(date, format) {\r\n\t\tvar text = \"\",\r\n\t\t    parts = [],\r\n\t\t    fn, match;\r\n\t\tformat = format || \"yyyy-M-d\";\r\n\t\tif (typeof date === \"string\") {\r\n\t\t    if (/^\\d+$/.test(date)) {\r\n\t\t      \tdate = numberFormat.toInt(date);\r\n\t\t    } else if (raspnetjson.test(date)) { //匹配 '/Date(1483410908227)/' 类型的字符串\r\n\t\t      \tdate = +RegExp.$1; //RegExp.$1 表示前面raspnetjson.test()匹配到的第一个括号中的内容\r\n\t\t    } else if(/^\\d{4}\\D*\\d{2}\\D*\\d{2}$/.test(date)){\r\n\t\t\t\tdate=new Date(date)-8*3600*1000;\r\n\t\t\t}else if(/^\\d{4}\\D*\\d{2}\\D*\\d{2} \\d{2}:\\d{2}:\\d{2}$/.test(date)){\r\n\t\t\t\tdate=new Date(date);\r\n\t\t\t}else{\r\n\t\t      \tconsole.error('请输入合法的日期');\r\n\t\t      \treturn;\r\n\t\t    }\r\n\t\t}\r\n\t\tif (typeof date === 'number') {\r\n\t\t    date = new Date(date);\r\n\t\t}\r\n\t\twhile (format) {\r\n\t\t    match = rdateFormat.exec(format);\r\n\t\t    /* istanbul ignore else */\r\n\t\t    if (match) {\r\n\t\t      \tparts = parts.concat(match.slice(1));\r\n\t\t      \tformat = parts.pop();\r\n\t\t    } else {\r\n\t\t      \tparts.push(format);\r\n\t\t      \tformat = null;\r\n\t\t    }\r\n\t\t}\r\n\t\tparts.forEach(function (value) {\r\n\t\t    fn = DATE_FORMATS[value];\r\n\t\t    text += fn ? fn(date) : value.replace(/(^'|'$)/g, \"\").replace(/''/g, \"'\");\r\n\t\t});\r\n\t\treturn text;\r\n\t}\r\n\r\n\treturn dateFilter\r\n}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/dateFilter.js\n// module id = 8\n// module chunks = 0\n//# sourceURL=webpack:///./src/dateFilter.js?");

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

	eval("/**\r\n * @author rubyisapm\r\n */\r\n/**\r\n * 该地区常量AREA为内部地区源数据，请直接从script引入该全局变量\r\n */\r\n!(module.exports = {\r\n    /**\r\n     * 检测当前的地区类似\r\n     * @param nameOrId 地区ID[组]或者名称[组]\r\n     * @returns {String} 'province' | 'city' | 'region' | 'other'\r\n     */\r\n    areaType: function (nameOrId) {\r\n        var isId = /^\\d+$/.test(nameOrId);\r\n        if (isId) {\r\n            if (nameOrId.length === 2) {\r\n                return 'province';\r\n            } else if (nameOrId.length === 4) {\r\n                return 'city';\r\n            } else if (nameOrId.length === 6) {\r\n                return 'region';\r\n            }\r\n        } else {\r\n            var areaArr = nameOrId.split(/[^\\u4e00-\\u9fa5]+/);\r\n            if (areaArr.length === 1) {\r\n                return 'province';\r\n            } else if (areaArr.length === 2) {\r\n                return 'city';\r\n            } else if (areaArr.length === 3) {\r\n                return 'region';\r\n            }\r\n        }\r\n        return 'other';\r\n    },\r\n    /**\r\n     * 根据地区名称组获取对应的id组 如'浙江-杭州'转换为0601\r\n     * @param {String} name 地区名称如'浙江'(或名称组如'浙江-杭州')\r\n     * @returns {String}\r\n     */\r\n    getAreaIdByName: function (name) {\r\n        name = name.split(/[^\\u4e00-\\u9fa5]+/);\r\n        var provinceName = name[0],\r\n            cityName = name.length > 1 ? name[1] : '',\r\n            regionName = name.length > 2 ? name[2] : '',\r\n            provinceId = AREA.province.filter(function (item) {\r\n                return item.Name === provinceName;\r\n            })[0].ID,\r\n            cityId = cityName != '' ? AREA.city[provinceName].filter(function (item) {\r\n                return item.Name === cityName;\r\n            })[0].ID : '',\r\n            regionId = regionName != '' ? AREA.region[cityName].filter(function (item) {\r\n                return item.Name === regionName;\r\n            })[0].ID : '';\r\n\r\n        return [provinceId, cityId, regionId][name.length - 1];\r\n    },\r\n    /**\r\n     * 根据Id组获取地区组名称 如0601转换为'浙江-杭州'\r\n     * @param {String} id 地区ID如'06'（或ID组如'0601'）\r\n     * @param {String} [sep='-'] 分隔符\r\n     * @returns {String}\r\n     */\r\n    getAreaNameById: function (id, sep) {\r\n        sep = sep || '-';\r\n        var provinceId = id.substr(0, 2),\r\n            cityId = id.length > 2 ? id.substr(0, 4) : '',\r\n            regionId = id.length > 4 ? id.substr(0, 6) : '',\r\n            provinceName = provinceId !== '' ? AREA.province.filter(function(item) {\r\n                return item.ID === provinceId;\r\n            })[0].Name : '',\r\n            cityName = cityId !== '' ? AREA.city[provinceName].filter(function(item) {\r\n                return item.ID === cityId;\r\n            })[0].Name : '',\r\n            regionName = regionId !== '' ? AREA.region[cityName].filter(function(item) {\r\n                return item.ID === regionId;\r\n            })[0].Name : '';\r\n\r\n        if (id.length === 2) {\r\n            return provinceName;\r\n        } else if (id.length === 4) {\r\n            return provinceName + sep + cityName;\r\n        } else if (id.length == 6) {\r\n            return provinceName + sep + cityName + sep + regionName;\r\n        }\r\n    },\r\n    /**\r\n     * 获取具体province下的city\r\n     * @param {String} provinceName province名称\r\n     * @return {Array} province名称下的所有city组成的数组，其中每项是一个对象，包含单一city的ID和Name\r\n     */\r\n    getCitiesOfProvinceName: function (provinceName) {\r\n        var cities = AREA.city[provinceName],\r\n            citiesData = [];\r\n        if (typeof cities !== 'undefined') {\r\n            for (var c in cities) {\r\n                if (cities.hasOwnProperty(c)) {\r\n                    citiesData.push(cities[c]);\r\n                }\r\n            }\r\n        }\r\n        return citiesData;\r\n    },\r\n    /**\r\n     * 获取具体city下的region\r\n     * @param {String} cityName city名称\r\n     * @return {Array} city名称下的所有region组成的数组，其中每项是一个对象，包含单一region的ID和Name\r\n     */\r\n    getRegionsOfCityName: function (cityName) {\r\n        var regions = AREA.region[cityName],\r\n            regionsData = [];\r\n        if (typeof regions !== 'undefined') {\r\n            for (var r in regions) {\r\n                if (regions.hasOwnProperty(r)) {\r\n                    regionsData.push(regions[r]);\r\n                }\r\n            }\r\n        }\r\n        return regionsData;\r\n    },\r\n    /**\r\n     * 将扁平的数据结构变成树状结构\r\n     * @param {String} [childrenKey='children'] 表示层级的key名称\r\n     * @returns {Array}\r\n     */\r\n    areaTransfer: function (childrenKey) {\r\n        childrenKey = childrenKey || 'children';\r\n        var provincesData = AREA.province,\r\n            that = this;\r\n\r\n        provincesData.map(function (province) {\r\n            var provinceName = province.Name,\r\n                citiesData = that.getCitiesOfProvinceName(provinceName);\r\n            province[childrenKey] = citiesData;\r\n            citiesData.map(function (city) {\r\n                city[childrenKey] = that.getRegionsOfCityName(city.Name);\r\n            })\r\n        });\r\n        return provincesData;\r\n    }\r\n});\r\n\r\n\r\n\r\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/areaDataFormat.js\n// module id = 9\n// module chunks = 0\n//# sourceURL=webpack:///./src/areaDataFormat.js?");

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	eval("/**\r\n * @author rubyisapm\r\n */\r\n!(module.exports = {\r\n    list:{\r\n        needSearch:'请点击搜索',\r\n        noData:'没有数据',\r\n        defaultError:'请求出错'\r\n    }\r\n});\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/info.js\n// module id = 10\n// module chunks = 0\n//# sourceURL=webpack:///./src/info.js?");

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	eval("!(module.exports = {\r\n    // 获取滚动条宽度\r\n    getWidth: function () {\r\n        var scrollBarWidth = 0;\r\n\r\n        var outer = document.createElement('div');\r\n\r\n        outer.className = 'ct-adc-scrollbar__wrap';\r\n        outer.style.visibility = 'hidden';\r\n        outer.style.width = '100px';\r\n        outer.style.position = 'absolute';\r\n        outer.style.top = '-9999px';\r\n        document.body.appendChild(outer);\r\n\r\n        var widthNoScroll = outer.offsetWidth;\r\n\r\n        outer.style.overflow = 'scroll';\r\n\r\n        var inner = document.createElement('div');\r\n\r\n        inner.style.width = '100%';\r\n        outer.appendChild(inner);\r\n\r\n        var widthWithScroll = inner.offsetWidth;\r\n\r\n        outer.parentNode.removeChild(outer);\r\n        scrollBarWidth = widthNoScroll - widthWithScroll;\r\n\r\n        return scrollBarWidth;\r\n    }\r\n});\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scrollbar.js\n// module id = 11\n// module chunks = 0\n//# sourceURL=webpack:///./src/scrollbar.js?");

/***/ })
/******/ ])
});
;